/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jc.fog.data;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javafx.util.Pair;

/**
 *
 * @author Claus
 */
public class AbstractDAO
{    
    protected static Connection connection = null;
    
    public AbstractDAO(Connection connection) 
    {
        this.connection = connection;
    }
    
    /**
     * Opretter et PreparedStatement med argumenter indsat hvor sql indeholder wildcards ('?').
     * @param connection 
     * @param sql 
     * @param autoGeneratedKeys Enten Statement.NO_GENERATED_KEYS eller Statement.RETURN_GENERATED_KEYS.
     * @param parameters [optional] varargs af Pair objekter af Integer/Object par. Hvert par indikerer index på wildcard hvor Object skal indsættes, f.eks. (1, 250) sætter værdien 250 på første ?-wildcard i sql sætningen. Skal ingen værdier indsættes på wildcards, kan null angives.
     * @return PreparedStatement objekt som kan returnere nøgler hvis autoGeneratedKeys er Statement.RETURN_GENERATED_KEYS. Ellers returneres et alm. PreparedStatement.
     * @throws SQLException 
     */
    protected PreparedStatement createPreparedStatement(Connection connection, String sql, int autoGeneratedKeys, Pair<Integer, Object>... parameters) throws SQLException
    {
        PreparedStatement pstm;
        // Hvis autoGeneratedKeys ikke har en gyldig værdi, oprettes 'alm.' PreparedStatement objekt.
        if (autoGeneratedKeys != Statement.NO_GENERATED_KEYS && autoGeneratedKeys != Statement.RETURN_GENERATED_KEYS)
            pstm = connection.prepareStatement(sql);
        else
            pstm = connection.prepareStatement(sql, autoGeneratedKeys);
        
        // Sæt de evt. modtagne key-value par ind i sql sætningen.
        if (parameters != null)
            for (Pair<Integer, Object> pair : parameters)
            {
                pstm.setObject(pair.getKey(), pair.getValue());
            }
        
        return pstm;
    }
    
    /**
     * Udfører executeUpdate() på et PreparedStatement objekt som returnerer auto-genererede nøgler.
     * Efter udførelsen af sql sætningen, returneres det resulterende ResultSet med nøgler.
     * PRE: PreparedStatement skal have sin sql sat.
     * POST: executeUpdate er kaldt.
     * @param preparedStatement PreparedStatement objekt med sql klar til udførelse.
     * @return ResultSet Med automatisk oprettede nøgler. ResultSet fås fra preparedStatement.getGeneratedKeys().
     * @throws SQLException 
     */
    protected ResultSet updateAndGetKeys(PreparedStatement preparedStatement) throws SQLException 
    {
        preparedStatement.executeUpdate();
        ResultSet rs = preparedStatement.getGeneratedKeys();
        return rs;
    }
}
